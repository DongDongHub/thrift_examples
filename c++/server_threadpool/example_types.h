/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _UserProfile__isset {
  _UserProfile__isset() : userId(false), useName(false) {}
  bool userId;
  bool useName;
} _UserProfile__isset;

class UserProfile {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  UserProfile() : userId(0), useName("") {
  }

  virtual ~UserProfile() throw() {}

  int32_t userId;
  std::string useName;

  _UserProfile__isset __isset;

  void __set_userId(const int32_t val) {
    userId = val;
  }

  void __set_useName(const std::string& val) {
    useName = val;
  }

  bool operator == (const UserProfile & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(useName == rhs.useName))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
